import websocket
import json
import threading
import time
import statistics
from collections import deque, Counter
from datetime import datetime
import math

# Constants
WS_URL = "ws://192.168.1.149:8080/sensor/connect?type=android.sensor.accelerometer"
CLASS_LABELS = {
    0: "Walking",
    1: "Sleeping",
    2: "Standing",
    3: "Running"
}

# Rule-based classification based on magnitude thresholds
def classify_sample(magnitude):
    if magnitude < 0.5:
        return 1  # Sleeping
    elif 0.5 <= magnitude < 2.0:
        return 2  # Standing
    elif 2.0 <= magnitude < 6.0:
        return 0  # Walking
    else:
        return 3  # Running

# Buffers and state
data_buffer = deque(maxlen=10)         # 1 second of data (assuming ~10Hz)
second_labels = deque(maxlen=60)       # Stores 60 seconds of 1-sec labels
final_labels = []                      # Stores 6 blocks of 10-sec labels
final_output = []                      # Stores log entries
lock = threading.Lock()

# File to save JSON logs
JSON_FILE = "activity_log.json"

# Save a single 60-second label
def save_minute_label(label):
    timestamp = datetime.now().isoformat()
    entry = {"timestamp": timestamp, "activity": CLASS_LABELS[label]}
    final_output.append(entry)
    with open(JSON_FILE, "w") as f:
        json.dump(final_output, f, indent=2)
    print(f"Saved: {entry}")

# WebSocket callbacks
def on_message(ws, message):
    try:
        data = json.loads(message)
        x, y, z = data["values"]
        magnitude = math.sqrt(x**2 + y**2 + z**2)
        with lock:
            data_buffer.append(magnitude)
    except Exception as e:
        print("Error parsing message:", e)

def on_error(ws, error):
    print("WebSocket error:", error)

def on_close(ws, close_status_code, close_msg):
    print("WebSocket closed")

def on_open(ws):
    print("WebSocket connected")

# Background processing thread
def process_data():
    global data_buffer, second_labels, final_labels
    while True:
        time.sleep(1)
        with lock:
            if not data_buffer:
                continue
            avg_magnitude = statistics.mean(data_buffer)
            label = classify_sample(avg_magnitude)
            second_labels.append(label)
            data_buffer.clear()

        if len(second_labels) == 10:
            majority_10_sec = Counter(second_labels).most_common(1)[0][0]
            print("10-sec label:", CLASS_LABELS[majority_10_sec])
            second_labels.clear()
            final_labels.append(majority_10_sec)

        if len(final_labels) == 6:
            final_minute_label = Counter(final_labels).most_common(1)[0][0]
            save_minute_label(final_minute_label)
            final_labels.clear()

# Start WebSocket
ws = websocket.WebSocketApp(
    WS_URL,
    on_open=on_open,
    on_message=on_message,
    on_error=on_error,
    on_close=on_close
)

# Start threads
ws_thread = threading.Thread(target=ws.run_forever)
ws_thread.daemon = True
ws_thread.start()

processor_thread = threading.Thread(target=process_data)
processor_thread.daemon = True
processor_thread.start()

# Keep the main thread alive
try:
    while True:
        time.sleep(1)
except KeyboardInterrupt:
    print("Stopping...")
